@page "/historik"
@inject IAccountService AccountService
<h3>Historik</h3>

@if (_accounts == null)
{
    <p>Laddar konton...</p>
}
else
{
    <div class="row mb-3">
        <div class="col-lg-3 col-sm-6 mb-3">
            <label class="form-label">Välj Konto</label>
            <select class="form-select" @oninput="OnAccountChanged">
                <option value="" selected="@(!SelectedAccountId.HasValue)">Välj konto...</option>
                @foreach (var account in _accounts)
                {
                    <option value="@account.Id" selected="@(SelectedAccountId == account.Id)">@account.Name (@account.AccountType) - Saldo: @(string.IsNullOrEmpty(account.PinHash) ? account.Balance.ToString("N2") : "Låst") @account.Currency</option>
                }
            </select>
        </div>
        
        <div class="col-lg-3 col-sm-6 mb-3">
            <label class="form-label">Filtrera Typ</label>
            <select class="form-select" @bind="_selectedTransactionType">
                <option value="">Visa alla</option>
                <option value="@TransactionType.Deposit">Insättningar</option>
                <option value="@TransactionType.Withdrawal">Uttag</option>
                <option value="@TransactionType.Transfer">Överföringar</option>
            </select>
        </div>
        
        <div class="col-lg-3 col-sm-6 mb-3">
            <label class="form-label">Sortering</label>
            <select class="form-select" @bind="_selectedSort">
                <option value="date_desc">Datum (Nyast först)</option>
                <option value="date_asc">Datum (Äldst först)</option>
                <option value="amount_desc">Belopp (Högst)</option>
                <option value="amount_asc">Belopp (Lägst)</option>
            </select>
        </div>

        <div class="col-lg-3 col-sm-6 mb-3">
            <label class="form-label">Datum Från</label>
            <InputDate @bind-Value="_dateFrom" class="form-control" />
        </div>
        
        <div class="col-lg-3 col-sm-6 mb-3">
            <label class="form-label">Datum Till</label>
            <InputDate @bind-Value="_dateTo" class="form-control" />
        </div>

    </div>

    @if (SelectedAccountId.HasValue && SelectedAccountId.Value != Guid.Empty && _transactions == null)
    {
        <p>Laddar historik...</p>
    }
    else if (SelectedAccountId.HasValue && SelectedAccountId.Value != Guid.Empty && !FilteredTransactions.Any())
    {
        <div class="alert alert-info" role="alert">Inga transaktioner hittades för detta konto med aktuella filter.</div>
    }
    else if (SelectedAccountId.HasValue && SelectedAccountId.Value != Guid.Empty)
    {
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Datum</th>
                    <th>Typ</th>
                    <th>Belopp</th>
                    <th>Saldo Efter</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in FilteredTransactions)
                {
                    <tr>
                        <td>@t.Date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>
                            @if (t.TransactionType == TransactionType.Transfer)
                            {
                                <span class="badge bg-warning">Överföring @(t.Amount > 0 ? "IN" : "UT")</span>
                            }
                            else if (t.Amount > 0)
                            {
                                <span class="badge bg-success">Insättning</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Uttag</span>
                            }
                        </td>
                        <td>
                            @t.Amount.ToString("N2", new System.Globalization.CultureInfo("sv-SE")) SEK
                        </td>
                        <td>
                            <span class="badge bg-secondary">@t.BalanceAfter.ToString("N2", new System.Globalization.CultureInfo("sv-SE")) SEK</span>
                            </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<IBankAccount> _accounts;
    private List<Transaction> _transactions;
    private Guid? SelectedAccountId { get; set; } = null;
    private string _selectedTransactionType = string.Empty;
    private string _selectedSort = "date_desc";
    private DateTime _dateFrom = DateTime.Today.AddYears(-1);
    private DateTime _dateTo = DateTime.Today.AddDays(1).AddSeconds(-1);

    /// <summary>
    /// Applies filtering (type, date) and sorting to the raw transaction list.
    /// </summary>
    private IEnumerable<Transaction> FilteredTransactions
    {
        get
        {
            if (_transactions == null) return Enumerable.Empty<Transaction>();

            var query = _transactions.AsEnumerable();

            // Applies transaction type filter if set.
            if (!string.IsNullOrEmpty(_selectedTransactionType) && Enum.TryParse<TransactionType>(_selectedTransactionType, true, out var filterType))
            {
                query = query.Where(t => t.TransactionType == filterType);
            }

            // Applies date range filter.
            query = query.Where(t => t.Date >= _dateFrom && t.Date <= _dateTo);

            // Applies selected sorting logic.
            switch (_selectedSort)
            {
                case "date_asc":
                    query = query.OrderBy(t => t.Date).ThenBy(t => t.Id);
                    break;
                case "amount_desc":
                    query = query.OrderByDescending(t => Math.Abs(t.Amount)).ThenByDescending(t => t.Date);
                    break;
                case "amount_asc":
                    query = query.OrderBy(t => Math.Abs(t.Amount)).ThenByDescending(t => t.Date);
                    break;
                case "date_desc":
                default:
                    query = query.OrderByDescending(t => t.Date).ThenByDescending(t => t.Id);
                    break;
            }

            return query;
        }
    }

    /// <summary>
    /// Initializes accounts, selects the first one, and loads its transactions.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadAccountsAsync();
        if (_accounts != null && _accounts.Any())
        {
            SelectedAccountId = _accounts.First().Id;
            await LoadTransactionsForSelectedAccountAsync();
        }
    }

    /// <summary>
    /// Fetches the list of all bank accounts from the service.
    /// </summary>
    private async Task LoadAccountsAsync()
    {
        _accounts = await AccountService.GetAccountsAsync();
    }
    
    /// <summary>
    /// Handles account dropdown change, resets transactions, and loads new history.
    /// </summary>
    private async Task OnAccountChanged(ChangeEventArgs e)
    {
        _transactions = null; 
        if (Guid.TryParse(e.Value?.ToString(), out Guid newId) && newId != Guid.Empty)
        {
            SelectedAccountId = newId;
        }
        else
        {
            SelectedAccountId = null;
        }
        
        StateHasChanged();
        await LoadTransactionsForSelectedAccountAsync();
    }
    
    /// <summary>
    /// Fetches the transaction history for the currently selected account ID.
    /// </summary>
    private async Task LoadTransactionsForSelectedAccountAsync()
    {
        if (SelectedAccountId.HasValue && SelectedAccountId.Value != Guid.Empty)
        {
            _transactions = await AccountService.GetTransactionsAsync(SelectedAccountId.Value);
        }
        else
        {
            _transactions = new List<Transaction>();
        }
    }
}