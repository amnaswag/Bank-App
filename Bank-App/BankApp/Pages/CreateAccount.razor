@page "/CreateAccount"
@page "/"
@inject IAccountService AccountService

<h3>Vänligen skapa ett konto</h3>
<EditForm Model="_model" OnValidSubmit="HandleValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Kontonamn</label>
        <InputText @bind-Value="_model.Name" class="form-control" />
    </div>
    
    <div class="mb-3">
        <label class="form-label">Kontotyp</label>
        <InputSelect @bind-Value="_model.Type" class="form-select">
            <option value="@AccountType.Lönekonto">Lönekonto</option>
            <option value="@AccountType.Sparkonto">Sparkonto</option>
        </InputSelect>
    </div>
    
    <div class="mb-3">
        <label class="form-label">Valuta</label>
        <InputText @bind-Value="_model.Currency" class="form-control" />
    </div>
    
    <div class="mb-3">
        <label class="form-label">Start saldo</label>
        <InputNumber @bind-Value="_model.InitialBalance" class="form-control" />
    </div>
    
    <button type="submit" class="btn btn-primary mt-3">Skapa Konto</button>
</EditForm>

<hr class="mt-4" />

<h3>Dina Konton (@_accounts.Count)</h3>

@if (_accounts == null || !_accounts.Any())
{
    <p>Inga konton registrerade.</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Namn</th>
                <th>Typ</th>
                <th>Saldo</th>
                <th>Valuta</th>
                <th>Åtgärd</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var account in _accounts)
            {
                <tr>
                    <td><strong>@account.Name</strong></td>
                    <td>@account.AccountType</td>
                    <td>@account.Balance.ToString("C2", new System.Globalization.CultureInfo("sv-SE"))</td>
                    <td>@account.Currency</td>
                    <td>
                        <button @onclick="() => DeleteAccount(account.Id)" class="btn btn-danger btn-sm">Radera</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private CreateAccountModel _model = new();
    private List<IBankAccount> _accounts = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAccountsAsync();
    }

    private async Task LoadAccountsAsync()
    {
        _accounts = await AccountService.GetAccountsAsync();
    }

    private async Task HandleValidSubmitAsync()
    {
        await AccountService.CreateAccountAsync(
            _model.Name,
            _model.Type,
            _model.Currency,
            _model.InitialBalance
        );

        _model.Clear();
        await LoadAccountsAsync();
    }
    
    private async Task DeleteAccount(Guid accountId)
    {
        await AccountService.DeleteAccountAsync(accountId);
        await LoadAccountsAsync();
    }

    private class CreateAccountModel
    {
        public string Name { get; set; } = string.Empty;
        public AccountType Type { get; set; }
        public string Currency { get; set; } = "SEK";
        public decimal InitialBalance { get; set; } = 0;

        public void Clear()
        {
            Name = string.Empty;
            Currency = "SEK";
            InitialBalance = 0;
            Type = default;
        }
    }
}