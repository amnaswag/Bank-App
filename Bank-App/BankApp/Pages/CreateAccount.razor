@page "/CreateAccount"
@inject IAccountService AccountService
<div class="row">
    <div class="col-lg-6">
        <h3>Vänligen skapa ett konto</h3>
        <EditForm Model="_model" OnValidSubmit="HandleValidSubmitAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Kontonamn</label>
                <InputText @bind-Value="_model.Name" class="form-control" />
            </div>
            
            <div class="mb-3">
                <label class="form-label">Kontotyp</label>
                <InputSelect @bind-Value="_model.Type" class="form-select">
                    <option value="@AccountType.SalaryAccount">Lönekonto</option>
                    <option value="@AccountType.SavingsAccount">Sparkonto</option>
                </InputSelect>
            </div>
            
            <div class="mb-3">
                <label class="form-label">Valuta</label>
                <InputSelect @bind-Value="_model.Currency" class="form-select">
                    @foreach (var currency in Enum.GetValues<CurrencyType>())
                    {
                        <option value="@currency">@currency</option>
                    }
                </InputSelect>
            </div>
            
            <div class="mb-3">
                <label class="form-label">Start saldo</label>
                <InputNumber @bind-Value="_model.InitialBalance" class="form-control" />
            </div>
            
            <div class="mb-3 form-check">
                <InputCheckbox @bind-Value="_model.RequiresPin" class="form-check-input" id="requiresPinCheck" />
                <label class="form-check-label" for="requiresPinCheck">Kräv PIN-kod för detta konto (Valfri)</label>
            </div>
            
            @if (_model.RequiresPin)
            {
                <div class="mb-3">
                    <label class="form-label">PIN-kod (Siffror)</label>
                    <InputText @bind-Value="_model.Pin" class="form-control" type="password" maxlength="6" />
                </div>
            }

            <button type="submit" class="btn btn-primary mt-3">Skapa Konto</button>
        </EditForm>
    </div>
    
    <div class="col-lg-6">
        <hr class="mt-4" />
        <h3>Dina Konton (@(_accounts == null ? 0 : _accounts.Count))</h3>
        
        @if (_accounts == null || !_accounts.Any())
        {
            <p>Inga konton registrerade.</p>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Namn</th>
                        <th>Typ</th>
                        <th>PIN</th>
                        <th>Saldo</th>
                        <th>Åtgärd</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var account in _accounts)
                    {
                        <tr>
                            <td><strong>@account.Name</strong></td>
                            <td>@GetAccountTypeName(account.AccountType)</td>
                            <td>@(string.IsNullOrEmpty(account.PinHash) ? "Nej" : "Ja")</td>
                            <td>@account.Balance.ToString("C2", new System.Globalization.CultureInfo("sv-SE"))</td>
                            <td>
                                <button @onclick="() => DeleteAccountAsync(account.Id)" class="btn btn-danger btn-sm">Radera</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private CreateAccountModel _model = new();
    private List<IBankAccount> _accounts;

    /// <summary>
    /// Helper method to convert the AccountType Enum to its Swedish descriptive name for display.
    /// </summary>
    private string GetAccountTypeName(AccountType type)
    {
        return type switch
        {
            AccountType.SalaryAccount => "Lönekonto",
            AccountType.SavingsAccount => "Sparkonto",
            _ => type.ToString(), 
        };
    }

    /// <summary>
    /// Initializes component by loading existing accounts.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadAccountsAsync();
    }

    /// <summary>
    /// Fetches the latest list of accounts from the service.
    /// </summary>
    private async Task LoadAccountsAsync()
    {
        _accounts = await AccountService.GetAccountsAsync();
    }

    /// <summary>
    /// Handles valid form submission, creating the new account via the service.
    /// </summary>
    private async Task HandleValidSubmitAsync()
    {
        string? pinToSave = null;
        if (_model.RequiresPin)
        {
            pinToSave = _model.Pin;
        }

        // Calls service to create the new account.
        await AccountService.CreateAccountAsync(
            _model.Name,
            _model.Type,
            _model.Currency,
            _model.InitialBalance,
            pinToSave
        );
        _model.Clear(); // Clears form after successful creation
        await LoadAccountsAsync(); // Refreshes the list
    }
    
    /// <summary>
    /// Deletes an account by ID and reloads the list.
    /// </summary>
    private async Task DeleteAccountAsync(Guid accountId)
    {
        await AccountService.DeleteAccountAsync(accountId);
        await LoadAccountsAsync();
    }

    /// <summary>
    /// ViewModel for the account creation form data.
    /// </summary>
    private class CreateAccountModel
    {
        public string Name { get; set; } = string.Empty;
        public AccountType Type { get; set; }
        public CurrencyType Currency { get; set; } = CurrencyType.SEK;
        public decimal InitialBalance { get; set; } = 0;
        public string Pin { get; set; } = string.Empty;
        public bool RequiresPin { get; set; } = false;
        
        /// <summary>
        /// Resets the form fields to their default state.
        /// </summary>
        public void Clear()
        {
            Name = string.Empty;
            Currency = CurrencyType.SEK;
            InitialBalance = 0;
            Type = default;
            Pin = string.Empty;
            RequiresPin = false;
        }
    }
}