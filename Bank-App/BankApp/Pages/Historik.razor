@page "/historik"
@inject IAccountService AccountService

<h3>Historik</h3>

@if (_accounts == null)
{
    <p>Laddar konton...</p>
}
else
{
    <div class="row mb-3">
        <div class="col-6">
            <label class="form-label">Välj Konto</label>
            
            <select class="form-select" @oninput="OnAccountChanged">
                <option value="" selected="@(!SelectedAccountId.HasValue)">Välj konto...</option>
                @foreach (var account in _accounts)
                {
                    <option value="@account.Id" selected="@(SelectedAccountId == account.Id)">@account.Name (@account.AccountType) - Saldo: @account.Balance.ToString("N2") SEK</option>
                }
            </select>
        </div>
        
        <div class="col-6">
            <label class="form-label">Filtrera Typ</label>
            
            <select class="form-select" @bind="_selectedTransactionType">
                <option value="">Visa alla</option>
                <option value="@TransactionType.Insättning">Insättningar</option>
                <option value="@TransactionType.Uttag">Uttag</option>
                <option value="@TransactionType.Överföring">Överföringar</option>
            </select>
        </div>
    </div>

    @if (SelectedAccountId.HasValue && SelectedAccountId.Value != Guid.Empty && _transactions == null)
    {
        <p>Laddar historik...</p>
    }
    else if (SelectedAccountId.HasValue && SelectedAccountId.Value != Guid.Empty && !FilteredTransactions.Any())
    {
        <div class="alert alert-info" role="alert">Inga transaktioner hittades för detta konto.</div>
    }
    else if (SelectedAccountId.HasValue && SelectedAccountId.Value != Guid.Empty)
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Datum</th>
                    <th>Typ</th>
                    <th>Belopp</th>
                    <th>Saldo Efter</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in FilteredTransactions)
                {
                    <tr>
                        <td>@t.Date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>
                            @if (t.TransactionType == TransactionType.Överföring)
                            {
                                <span class="badge bg-warning">Överföring @(t.Amount > 0 ? "IN" : "UT")</span>
                            }
                            else if (t.Amount > 0)
                            {
                                <span class="badge bg-success">Insättning</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Uttag</span>
                            }
                        </td>
                        <td>
                            @t.Amount.ToString("N2", new System.Globalization.CultureInfo("sv-SE")) SEK
                        </td>
                        <td>
                            <span class="badge bg-secondary">@t.BalanceAfter.ToString("N2", new System.Globalization.CultureInfo("sv-SE")) SEK</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<IBankAccount> _accounts;
    private List<Transaction> _transactions;
    private Guid? SelectedAccountId { get; set; } = null;
    private string? _selectedTransactionType = null;

    private IEnumerable<Transaction> FilteredTransactions => _transactions.Where(t => 
        string.IsNullOrEmpty(_selectedTransactionType) || 
        (Enum.TryParse<TransactionType>(_selectedTransactionType, true, out var filterType) && t.TransactionType == filterType)
    );


    protected override async Task OnInitializedAsync()
    {
        await LoadAccountsAsync();

        if (_accounts.Any())
        {
            SelectedAccountId = _accounts.First().Id;
            await LoadTransactionsForSelectedAccountAsync();
        }
    }

    private async Task LoadAccountsAsync()
    {
        _accounts = await AccountService.GetAccountsAsync();
    }
    
    private async Task OnAccountChanged(ChangeEventArgs e)
    {
        _transactions = null; 

        if (Guid.TryParse(e.Value?.ToString(), out Guid newId) && newId != Guid.Empty)
        {
            SelectedAccountId = newId;
        }
        else
        {
            SelectedAccountId = null;
        }
        
        StateHasChanged(); 
        await LoadTransactionsForSelectedAccountAsync();
    }
    
    private async Task LoadTransactionsForSelectedAccountAsync()
    {
        if (SelectedAccountId.HasValue && SelectedAccountId.Value != Guid.Empty)
        {
            _transactions = await AccountService.GetTransactionsAsync(SelectedAccountId.Value);
        }
        else
        {
            _transactions = new List<Transaction>();
        }
    }
}